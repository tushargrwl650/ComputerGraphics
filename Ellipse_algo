#include <iostream>
#include<stdio.h>
#include<graphics.h>
#include<conio.h>
using namespace std;
void drawEllipse(int xc, int yc, int x, int y)
{
	    putpixel(x+xc, yc+y, WHITE);
        putpixel(xc-x, yc+y, WHITE); 
        putpixel(xc+x, yc-y, WHITE); 
        putpixel(xc-x, yc-y, WHITE);   
}
void midptellipse(int rx, int ry, int xc, int yc) 
{
    int  dx, dy, d1, d2, x, y; 
    x = 0; 
    y = ry; 
    int gd = DETECT, gm; 
    initgraph(&gd, &gm, "");
  
    // Initial decision parameter of region 1 
    d1 = (ry * ry) - (rx * rx * ry) +  (0.25 * rx * rx); 
    dx = 2 * ry * ry * x; 
    dy = 2 * rx * rx * y; 
  
    // For region 1 
    while (dx < dy)  
    { 
  
 
        drawEllipse(xc, yc, x, y);
  
        if (d1 < 0) 
        { 
            x++; 
            dx = dx + (2 * ry * ry); 
            d1 = d1 + dx + (ry * ry); 
        } 
        else 
        { 
            x++; 
            y--; 
            dx = dx + (2 * ry * ry); 
            dy = dy - (2 * rx * rx); 
            d1 = d1 + dx - dy + (ry * ry); 
        } 
    } 
  
    // Decision parameter of region 2 
    d2 = ((ry*ry)*((x+0.5)*(x+0.5)))+((rx*rx)*((y-1)*(y-1)))-(rx*rx*ry*ry); 
  
    // Plotting points of region 2 
    while (y >= 0) 
    { 
  
        drawEllipse(xc,yc,x,y);
        if (d2 > 0)  
        { 
            y--; 
            dy = dy - (2 * rx * rx); 
            d2 = d2 + (rx * rx) - dy; 
        } 
        else 
        { 
            y--; 
            x++; 
            dx = dx + (2 * ry * ry); 
            dy = dy - (2 * rx * rx); 
            d2 = d2 + dx - dy + (rx * rx); 
        } 
    } 
} 
   
int main() 
{ 
    int x, y, major_axis, minor_axis;
    cout<<"Ellipse Drawing Algorithm :: ";
    cout<<"Enter coordinates of center(x,y) :: \n";
    cout<<"Enter x :: ";
    cin>>x;
    cout<<"\nEnter y :: ";
    cin>>y;
    cout<<"\nEnter length of Major Axis :: ";
    cin>>major_axis;
    cout<<"\nEnter length of Minor Axis :: ";
    cin>>minor_axis;
    
    midptellipse( major_axis,minor_axis, x, y);// 100 50 200 200
	getch(); 
  
    return 0; 
} 
